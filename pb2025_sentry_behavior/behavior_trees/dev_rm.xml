<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="4">
  <BehaviorTree ID="rmul_behaviortree">
    <WhileDoElse>
      <IsGameStatus max_remain_time="420"
                    min_remain_time="0"
                    game_progress="4"
                    key_port="{@referee_gameStatus}"/>
      <WhileDoElse>
        <IsStatusOK ammo_min="0"
                    heat_max="350"
                    hp_min="160"
                    key_port="{@referee_robotStatus}"/>
        <ReactiveSequence>
          <WhileDoElse>
            <IsReachGoal current_pose="{@current_pose}"
                         threshold="1.0"/>
            <PubSpinFlag spin_flag="3"
                         topic_name="spin_flag"/>
            <PubNav2Goal goal="4.73;-1.78;0"
                         topic_name="goal_pose"/>
          </WhileDoElse>
          <SubTree ID="test_is_attacked"/>
        </ReactiveSequence>
        <ReactiveSequence>
          <PubSpinFlag spin_flag="1"
                       topic_name="spin_flag"/>
          <PubNav2Goal goal="0;0;0"
                       topic_name="goal_pose"/>
        </ReactiveSequence>
      </WhileDoElse>
      <RateController hz="1">
        <PubNav2Goal goal="0;0;0"
                     topic_name="goal_pose"/>
      </RateController>
    </WhileDoElse>
  </BehaviorTree>

  <BehaviorTree ID="rmul_supply">
    <WhileDoElse>
      <IsRfidDetected friendly_supply_zone_exchange="false"
                      friendly_supply_zone_non_exchange="true"
                      center_gain_point="false"
                      friendly_fortress_gain_point="false"
                      key_port="{@referee_rfidStatus}"/>
      <RetryUntilSuccessful num_attempts="-1">
        <IsStatusOK ammo_min="0"
                    heat_max="100"
                    hp_min="399"
                    key_port="{@referee_robotStatus}"/>
      </RetryUntilSuccessful>
      <Sequence>
        <PubNav2Goal goal="0;0;0"
                     topic_name="goal_pose"/>
        <Sleep msec="500"/>
      </Sequence>
    </WhileDoElse>
  </BehaviorTree>

  <BehaviorTree ID="test">
    <SendNav2Goal goal="1;0;0"
                  action_name="navigate_to_pose"/>
  </BehaviorTree>

  <BehaviorTree ID="test_attack_pose">
    <KeepRunningUntilFailure>
      <ForceSuccess>
        <Sequence>
          <CalculateAttackPose costmap_port="{@nav_globalCostmap}"
                               tracker_port="{@tracker_target}"
                               goal="{attack_pose}"
                               topic_name="debug_attack_pose"/>
          <PubNav2Goal goal="{attack_pose}"
                       topic_name="goal_pose"/>
        </Sequence>
      </ForceSuccess>
    </KeepRunningUntilFailure>
  </BehaviorTree>

  <BehaviorTree ID="test_go_to_supply">
    <Repeat num_cycles="-1">
      <WhileDoElse>
        <IsStatusOK ammo_min="0"
                    heat_max="350"
                    hp_min="350"
                    key_port="{@referee_robotStatus}"/>
        <Sequence>
          <PubNav2Goal goal="3;0;0"
                       topic_name="goal_pose"/>
          <Sleep msec="500"/>
        </Sequence>
        <SubTree ID="rmul_supply"/>
      </WhileDoElse>
    </Repeat>
  </BehaviorTree>

  <BehaviorTree ID="test_is_attacked">
    <ReactiveFallback>
      <Inverter>
        <IsAttacked key_port="{@referee_robotStatus}"/>
      </Inverter>
      <PubSpinFlag spin_flag="3"
                   topic_name="spin_flag"/>
    </ReactiveFallback>
  </BehaviorTree>

  <BehaviorTree ID="test_is_detect_enemy">
    <ReactiveFallback>
      <Inverter>
        <IsDetectEnemy tracking="true"
                       key_port="{@tracker_target}"/>
      </Inverter>
      <PubSpinFlag spin_flag="3"
                   topic_name="spin_flag"/>
    </ReactiveFallback>
  </BehaviorTree>

  <BehaviorTree ID="test_is_reach_goal">
    <WhileDoElse>
      <IsReachGoal current_pose="{@current_pose}"
                   threshold="0.4"/>
      <PubSpinFlag spin_flag="3"
                   topic_name="spin_flag"/>
      <PubNav2Goal goal="5.75;0.16;0"
                   topic_name="goal_pose"/>
    </WhileDoElse>
  </BehaviorTree>

  <BehaviorTree ID="test_spin_flag">
    <ReactiveFallback>
      <SubTree ID="test_is_detect_enemy"/>
      <SubTree ID="test_is_attacked"/>
    </ReactiveFallback>
  </BehaviorTree>

  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Condition ID="CalculateAttackPose">
      <input_port name="costmap_port"
                  default="{@nav_globalCostmap}"
                  type="nav_msgs::msg::OccupancyGrid_&lt;std::allocator&lt;void&gt; &gt;">GlobalCostmap port on blackboard</input_port>
      <input_port name="tracker_port"
                  default="{@tracker_target}"
                  type="auto_aim_interfaces::msg::Target_&lt;std::allocator&lt;void&gt; &gt;">Vision target port on blackboard</input_port>
      <output_port name="goal"
                   default="{attack_pose}"
                   type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;">Expected goal pose that send to nav2. Fill with format `x;y;yaw`</output_port>
      <input_port name="topic_name"
                  default="__default__placeholder__"
                  type="std::string">Topic name</input_port>
    </Condition>
    <Condition ID="IsAttacked">
      <input_port name="key_port"
                  default="{@referee_robotStatus}"/>
    </Condition>
    <Condition ID="IsDetectEnemy"
               editable="true">
      <input_port name="tracking"
                  default="false">is detect enemy</input_port>
      <input_port name="key_port"
                  default="{@tracker_target}">Vision tracking port on blackboard</input_port>
    </Condition>
    <Condition ID="IsGameStatus">
      <input_port name="max_remain_time"
                  default="420"
                  type="int">Maximum remaining time (s)</input_port>
      <input_port name="min_remain_time"
                  default="0"
                  type="int">Minimum remaining time (s)</input_port>
      <input_port name="game_progress"
                  default="4"
                  type="int">Expected game progress stage</input_port>
      <input_port name="key_port"
                  default="{@referee_gameStatus}"
                  type="pb_rm_interfaces::msg::GameStatus_&lt;std::allocator&lt;void&gt; &gt;">GameStatus port on blackboard</input_port>
    </Condition>
    <Condition ID="IsReachGoal"
               editable="true">
      <input_port name="current_pose"
                  default="{@current_pose}"/>
      <input_port name="threshold"
                  default="0.2"/>
    </Condition>
    <Condition ID="IsRfidDetected">
      <input_port name="friendly_supply_zone_exchange"
                  default="false"
                  type="bool">己方与兑换区重叠的补给区</input_port>
      <input_port name="friendly_supply_zone_non_exchange"
                  default="false"
                  type="bool">己方与兑换区不重叠的补给区 / RMUL 补给区</input_port>
      <input_port name="center_gain_point"
                  default="false"
                  type="bool">中心增益点（仅 RMUL 适用）</input_port>
      <input_port name="friendly_fortress_gain_point"
                  default="false"
                  type="bool">己方堡垒增益点</input_port>
      <input_port name="key_port"
                  default="{@referee_rfidStatus}"
                  type="pb_rm_interfaces::msg::RfidStatus_&lt;std::allocator&lt;void&gt; &gt;">RfidStatus port on blackboard</input_port>
    </Condition>
    <Condition ID="IsStatusOK">
      <input_port name="ammo_min"
                  default="0"
                  type="int">Lower then minimum ammo will return FAILURE</input_port>
      <input_port name="heat_max"
                  default="350"
                  type="int">Maximum heat. NOTE: Sentry heat limit is 400</input_port>
      <input_port name="hp_min"
                  default="300"
                  type="int">Minimum HP. NOTE: Sentry init/max HP is 400</input_port>
      <input_port name="key_port"
                  default="{@referee_robotStatus}"
                  type="pb_rm_interfaces::msg::RobotStatus_&lt;std::allocator&lt;void&gt; &gt;">RobotStatus port on blackboard</input_port>
    </Condition>
    <Condition ID="PubNav2Goal">
      <input_port name="goal"
                  default="0;0;0"
                  type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;">Expected goal pose that send to nav2. Fill with format `x;y;yaw`</input_port>
      <input_port name="topic_name"
                  default="__default__placeholder__"
                  type="std::string">Topic name</input_port>
    </Condition>
    <Action ID="PubSpinFlag"
            editable="true">
      <input_port name="spin_flag"
                  default="true">spin_flag</input_port>
      <input_port name="topic_name"
                  default="spin">Topic name</input_port>
    </Action>
    <Decorator ID="RateController">
      <input_port name="hz"
                  default="10.000000"
                  type="double">Rate</input_port>
    </Decorator>
    <Action ID="SendNav2Goal">
      <input_port name="goal"
                  default="0;0;0"
                  type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;">Expected goal pose that send to nav2. Fill with format `x;y;yaw`</input_port>
      <input_port name="action_name"
                  type="std::string">Action server name</input_port>
    </Action>
  </TreeNodesModel>

</root>
